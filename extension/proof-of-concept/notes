id of reply button: #u_0_r
class of reply button: 5f0v

reply button:
  id: u_0_r
  class: 5f0v

text area:
  name: message_body
   
CLICKING THINGS
document.getElementById('u_0_r).click()

SETTING TEXT
document.getElementsByName('message_body')[0].value = "message goes here"

-----

1) can we set up a separate script for the main.js and the sub.js? 
  -> sub is loaded from the iframe
  -> main is loaded from our webserver
  DONE-- BUT: change the localhost to be for our actual webapp
2) We should be able to, from the main.js, tell our sub.js to post a message
  DONE (proof of concept)
  NOTE: this will require our main.js to be watching our client / listening for some sort of message send event
3) We should be able to, from the sub.js, tell our main.js we have received a new message, and pass that message along [NOTE: this requires PARSING]
4) MAKE SURE WE DONT READ ALL YOUR MESSAGES UNLESS YOU GO TO OUR APP

----------------------------

NEXT STEP:

Ability to read & send messages to facebook from our web application

----------------------------

CURRENT PROBLEM:

How to handle receiving messages from somebody on facebook who isnt our active user?
1) reload the entire page. Baaaaaaaaad idea. We'll lose all state on our facebook.js
2) click the button. Better idea. How can we make sure we're not still loading though? Is it that big a deal? It honestly mostly seems to work...but I could imagine some race conditions where it might not.
  - POTENTIAL RACE CONDITION: 
    - click a new user
    - waiting for that user to load
    - in the meantime, get a message from the existing user, after the url has changed
    - mistakenly associate the new message with the new user, instead of the existing user
  - FIX:
    - change association of messages to usernames to be based on the urls inside the messagebox


